{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/HomePage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/ChatPage.js","App.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","setUser","password","setPassword","loading","setLoading","history","useHistory","submitHandler","a","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","userInfo","parse","getItem","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","notification","setNotification","chats","setChats","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","removeItem","borderBottomWidth","Chatpage","App","path","component","HomePage","exact","ChatPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65035e6b.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () =>\r\n{\r\n    const [ show, setShow ] = useState( false );\r\n    const handleClick = () => setShow( !show );\r\n    const toast = useToast();\r\n    const [ email, setEmail ] = useState();\r\n    const [ user, setUser ] = useState();\r\n    const [ password, setPassword ] = useState();\r\n    const [ loading, setLoading ] = useState( false );\r\n\r\n    const history = useHistory();\r\n\r\n    const submitHandler = async () =>\r\n    {\r\n        setLoading( true );\r\n        if ( !email || !password )\r\n        {\r\n            toast( {\r\n                title: \"Please Fill all the Feilds\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setLoading( false );\r\n            return;\r\n        }\r\n\r\n        // console.log(email, password);\r\n        try\r\n        {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.post(\r\n                \"/api/user/login\",\r\n                { email, password },\r\n                config\r\n            );\r\n\r\n            // console.log(JSON.stringify(data));\r\n            toast( {\r\n                title: \"Login Successful\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n            setLoading( false );\r\n            const userInfo = JSON.parse( localStorage.getItem( \"userInfo\" ) );\r\n            setUser( userInfo )\r\n            history.push( \"/chats\" );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setLoading( false );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VStack spacing=\"10px\">\r\n            <FormControl id=\"email\" isRequired>\r\n                <FormLabel>Email Address</FormLabel>\r\n                <Input\r\n                    value={ email }\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Your Email Address\"\r\n                    onChange={ ( e ) => setEmail( e.target.value ) }\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Password</FormLabel>\r\n                <InputGroup size=\"md\">\r\n                    <Input\r\n                        value={ password }\r\n                        onChange={ ( e ) => setPassword( e.target.value ) }\r\n                        type={ show ? \"text\" : \"password\" }\r\n                        placeholder=\"Enter password\"\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={ handleClick }>\r\n                            { show ? \"Hide\" : \"Show\" }\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <Button\r\n                colorScheme=\"blue\"\r\n                width=\"100%\"\r\n                style={ { marginTop: 15 } }\r\n                onClick={ submitHandler }\r\n                isLoading={ loading }\r\n            >\r\n                Login\r\n            </Button>\r\n            <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"red\"\r\n                width=\"100%\"\r\n                onClick={ () =>\r\n                {\r\n                    setEmail( \"guest@example.com\" );\r\n                    setPassword( \"123456\" );\r\n                } }\r\n            >\r\n                Get Guest User Credentials\r\n            </Button>\r\n        </VStack>\r\n    );\r\n};\r\n\r\nexport default Login;","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () =>\r\n{\r\n    const [ show, setShow ] = useState( false );\r\n    const handleClick = () => setShow( !show );\r\n    const toast = useToast();\r\n    const history = useHistory();\r\n\r\n    const [ name, setName ] = useState();\r\n    const [ email, setEmail ] = useState();\r\n    const [ confirmpassword, setConfirmpassword ] = useState();\r\n    const [ password, setPassword ] = useState();\r\n    const [ pic, setPic ] = useState();\r\n    const [ picLoading, setPicLoading ] = useState( false );\r\n\r\n    const submitHandler = async () =>\r\n    {\r\n        setPicLoading( true );\r\n        if ( !name || !email || !password || !confirmpassword )\r\n        {\r\n            toast( {\r\n                title: \"Please Fill all the Feilds\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setPicLoading( false );\r\n            return;\r\n        }\r\n        if ( password !== confirmpassword )\r\n        {\r\n            toast( {\r\n                title: \"Passwords Do Not Match\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            return;\r\n        }\r\n        console.log( name, email, password, pic );\r\n        try\r\n        {\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                },\r\n            };\r\n            const { data } = await axios.post(\r\n                \"/api/user\",\r\n                {\r\n                    name,\r\n                    email,\r\n                    password,\r\n                    pic,\r\n                },\r\n                config\r\n            );\r\n            console.log( data );\r\n            toast( {\r\n                title: \"Registration Successful\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            localStorage.setItem( \"userInfo\", JSON.stringify( data ) );\r\n            setPicLoading( false );\r\n            history.push( \"/chats\" );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setPicLoading( false );\r\n        }\r\n    };\r\n\r\n    const postDetails = ( pics ) =>\r\n    {\r\n        setPicLoading( true );\r\n        if ( pics === undefined )\r\n        {\r\n            toast( {\r\n                title: \"Please Select an Image!\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            return;\r\n        }\r\n        console.log( pics );\r\n        if ( pics.type === \"image/jpeg\" || pics.type === \"image/png\" )\r\n        {\r\n            const data = new FormData();\r\n            data.append( \"file\", pics );\r\n            data.append( \"upload_preset\", \"chat-app\" );\r\n            data.append( \"cloud_name\", \"piyushproj\" );\r\n            fetch( \"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n                method: \"post\",\r\n                body: data,\r\n            } )\r\n                .then( ( res ) => res.json() )\r\n                .then( ( data ) =>\r\n                {\r\n                    setPic( data.url.toString() );\r\n                    console.log( data.url.toString() );\r\n                    setPicLoading( false );\r\n                } )\r\n                .catch( ( err ) =>\r\n                {\r\n                    console.log( err );\r\n                    setPicLoading( false );\r\n                } );\r\n        } else\r\n        {\r\n            toast( {\r\n                title: \"Please Select an Image!\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setPicLoading( false );\r\n            return;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <VStack spacing=\"5px\">\r\n            <FormControl id=\"first-name\" isRequired>\r\n                <FormLabel>Name</FormLabel>\r\n                <Input\r\n                    placeholder=\"Enter Your Name\"\r\n                    onChange={ ( e ) => setName( e.target.value ) }\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"email\" isRequired>\r\n                <FormLabel>Email Address</FormLabel>\r\n                <Input\r\n                    type=\"email\"\r\n                    placeholder=\"Enter Your Email Address\"\r\n                    onChange={ ( e ) => setEmail( e.target.value ) }\r\n                />\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Password</FormLabel>\r\n                <InputGroup size=\"md\">\r\n                    <Input\r\n                        type={ show ? \"text\" : \"password\" }\r\n                        placeholder=\"Enter Password\"\r\n                        onChange={ ( e ) => setPassword( e.target.value ) }\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={ handleClick }>\r\n                            { show ? \"Hide\" : \"Show\" }\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <FormControl id=\"password\" isRequired>\r\n                <FormLabel>Confirm Password</FormLabel>\r\n                <InputGroup size=\"md\">\r\n                    <Input\r\n                        type={ show ? \"text\" : \"password\" }\r\n                        placeholder=\"Confirm password\"\r\n                        onChange={ ( e ) => setConfirmpassword( e.target.value ) }\r\n                    />\r\n                    <InputRightElement width=\"4.5rem\">\r\n                        <Button h=\"1.75rem\" size=\"sm\" onClick={ handleClick }>\r\n                            { show ? \"Hide\" : \"Show\" }\r\n                        </Button>\r\n                    </InputRightElement>\r\n                </InputGroup>\r\n            </FormControl>\r\n            <FormControl id=\"pic\">\r\n                <FormLabel>Upload your Picture</FormLabel>\r\n                <Input\r\n                    type=\"file\"\r\n                    p={ 1.5 }\r\n                    accept=\"image/*\"\r\n                    onChange={ ( e ) => postDetails( e.target.files[ 0 ] ) }\r\n                />\r\n            </FormControl>\r\n            <Button\r\n                colorScheme=\"blue\"\r\n                width=\"100%\"\r\n                style={ { marginTop: 15 } }\r\n                onClick={ submitHandler }\r\n                isLoading={ picLoading }\r\n            >\r\n                Sign Up\r\n            </Button>\r\n        </VStack>\r\n    );\r\n};\r\n\r\nexport default Signup;","import\r\n  {\r\n    Box,\r\n    Container,\r\n    Tab,\r\n    TabList,\r\n    TabPanel,\r\n    TabPanels,\r\n    Tabs,\r\n    Text,\r\n  } from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage ()\r\n{\r\n  const history = useHistory();\r\n\r\n  useEffect( () =>\r\n  {\r\n    const user = JSON.parse( localStorage.getItem( \"userInfo\" ) );\r\n\r\n    if ( user ) history.push( \"/chats\" );\r\n  }, [ history ] );\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={ 3 }\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={ 4 } borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"https://mern-mychats.herokuapp.com/\";\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ( { fetchAgain, setFetchAgain } ) =>\r\n{\r\n    const [ messages, setMessages ] = useState( [] );\r\n    const [ loading, setLoading ] = useState( false );\r\n    const [ newMessage, setNewMessage ] = useState( \"\" );\r\n    const [ socketConnected, setSocketConnected ] = useState( false );\r\n    const [ typing, setTyping ] = useState( false );\r\n    const [ istyping, setIsTyping ] = useState( false );\r\n    const toast = useToast();\r\n\r\n    const defaultOptions = {\r\n        loop: true,\r\n        autoplay: true,\r\n        animationData: animationData,\r\n        rendererSettings: {\r\n            preserveAspectRatio: \"xMidYMid slice\",\r\n        },\r\n    };\r\n    const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n        ChatState();\r\n\r\n    const fetchMessages = async () =>\r\n    {\r\n        if ( !selectedChat ) return;\r\n\r\n        try\r\n        {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n\r\n            setLoading( true );\r\n\r\n            const { data } = await axios.get(\r\n                `/api/message/${ selectedChat._id }`,\r\n                config\r\n            );\r\n            setMessages( data );\r\n            setLoading( false );\r\n\r\n            socket.emit( \"join chat\", selectedChat._id );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the Messages\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    const sendMessage = async ( event ) =>\r\n    {\r\n        if ( event.key === \"Enter\" && newMessage )\r\n        {\r\n            socket.emit( \"stop typing\", selectedChat._id );\r\n            try\r\n            {\r\n                const config = {\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        Authorization: `Bearer ${ user.token }`,\r\n                    },\r\n                };\r\n                setNewMessage( \"\" );\r\n                const { data } = await axios.post(\r\n                    \"/api/message\",\r\n                    {\r\n                        content: newMessage,\r\n                        chatId: selectedChat,\r\n                    },\r\n                    config\r\n                );\r\n                socket.emit( \"new message\", data );\r\n                setMessages( [ ...messages, data ] );\r\n            } catch ( error )\r\n            {\r\n                toast( {\r\n                    title: \"Error Occured!\",\r\n                    description: \"Failed to send the Message\",\r\n                    status: \"error\",\r\n                    duration: 5000,\r\n                    isClosable: true,\r\n                    position: \"bottom\",\r\n                } );\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect( () =>\r\n    {\r\n        socket = io( ENDPOINT );\r\n        socket.emit( \"setup\", user );\r\n        socket.on( \"connected\", () => setSocketConnected( true ) );\r\n        socket.on( \"typing\", () => setIsTyping( true ) );\r\n        socket.on( \"stop typing\", () => setIsTyping( false ) );\r\n\r\n        // eslint-disable-next-line\r\n    }, [] );\r\n\r\n    useEffect( () =>\r\n    {\r\n        fetchMessages();\r\n        selectedChatCompare = selectedChat;\r\n    }, [ selectedChat ] );\r\n\r\n    useEffect( () =>\r\n    {\r\n        socket.on( \"message recieved\", ( newMessageRecieved ) =>\r\n        {\r\n            if (\r\n                !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n                selectedChatCompare._id !== newMessageRecieved.chat._id\r\n            )\r\n            {\r\n                if ( !notification.includes( newMessageRecieved ) )\r\n                {\r\n                    setNotification( [ newMessageRecieved, ...notification ] );\r\n                    setFetchAgain( !fetchAgain );\r\n                }\r\n            } else\r\n            {\r\n                setMessages( [ ...messages, newMessageRecieved ] );\r\n            }\r\n        } );\r\n    } );\r\n\r\n    const typingHandler = ( e ) =>\r\n    {\r\n        setNewMessage( e.target.value );\r\n\r\n        if ( !socketConnected ) return;\r\n\r\n        if ( !typing )\r\n        {\r\n            setTyping( true );\r\n            socket.emit( \"typing\", selectedChat._id );\r\n        }\r\n        let lastTypingTime = new Date().getTime(); // to stop typing \r\n        var timerLength = 3000; // user stops after timerlength\r\n        setTimeout( () =>\r\n        {\r\n            var timeNow = new Date().getTime();\r\n            var timeDiff = timeNow - lastTypingTime;\r\n            if ( timeDiff >= timerLength && typing )\r\n            {\r\n                socket.emit( \"stop typing\", selectedChat._id );\r\n                setTyping( false );\r\n            }\r\n        }, timerLength );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            { selectedChat ? (\r\n                <>\r\n                    <Text\r\n                        fontSize={ { base: \"28px\", md: \"30px\" } }\r\n                        pb={ 3 }\r\n                        px={ 2 }\r\n                        w=\"100%\"\r\n                        fontFamily=\"Work sans\"\r\n                        d=\"flex\"\r\n                        justifyContent={ { base: \"space-between\" } }\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <IconButton\r\n                            d={ { base: \"flex\", md: \"none\" } }\r\n                            icon={ <ArrowBackIcon /> }\r\n                            onClick={ () => setSelectedChat( \"\" ) }\r\n                        />\r\n                        { messages &&\r\n                            ( !selectedChat.isGroupChat ? (\r\n                                <>\r\n                                    { getSender( user, selectedChat.users ) }\r\n                                    <ProfileModal\r\n                                        user={ getSenderFull( user, selectedChat.users ) }\r\n                                    />\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    { selectedChat.chatName.toUpperCase() }\r\n                                    <UpdateGroupChatModal\r\n                                        fetchMessages={ fetchMessages }\r\n                                        fetchAgain={ fetchAgain }\r\n                                        setFetchAgain={ setFetchAgain }\r\n                                    />\r\n                                </>\r\n                            ) ) }\r\n                    </Text>\r\n                    <Box\r\n                        d=\"flex\"\r\n                        flexDir=\"column\"\r\n                        justifyContent=\"flex-end\"\r\n                        p={ 3 }\r\n                        bg=\"#E8E8E8\"\r\n                        w=\"100%\"\r\n                        h=\"100%\"\r\n                        borderRadius=\"lg\"\r\n                        overflowY=\"hidden\"\r\n                    >\r\n                        { loading ? (\r\n                            <Spinner\r\n                                size=\"xl\"\r\n                                w={ 20 }\r\n                                h={ 20 }\r\n                                alignSelf=\"center\"\r\n                                margin=\"auto\"\r\n                            />\r\n                        ) : (\r\n                            <div className=\"messages\">\r\n                                <ScrollableChat messages={ messages } />\r\n                            </div>\r\n                        ) }\r\n\r\n                        <FormControl\r\n                            onKeyDown={ sendMessage }\r\n                            id=\"first-name\"\r\n                            isRequired\r\n                            mt={ 3 }\r\n                        >\r\n                            { istyping ? (\r\n                                <div>\r\n                                    <Lottie\r\n                                        options={ defaultOptions }\r\n                                        // height={50}\r\n                                        width={ 60 }\r\n                                        style={ { marginBottom: 15, marginLeft: 0 } }\r\n                                    />\r\n                                </div>\r\n                            ) : (\r\n                                <></>\r\n                            ) }\r\n                            <Input\r\n                                variant=\"filled\"\r\n                                bg=\"#E0E0E0\"\r\n                                placeholder=\"Enter a message..\"\r\n                                value={ newMessage }\r\n                                onChange={ typingHandler }\r\n                            />\r\n                        </FormControl>\r\n                    </Box>\r\n                </>\r\n            ) : (\r\n                // to get socket.io on same page\r\n                <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n                    <Text fontSize=\"3xl\" pb={ 3 } fontFamily=\"Work sans\">\r\n                        Click on a user to start chatting\r\n                    </Text>\r\n                </Box>\r\n            ) }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SingleChat;","export const isSameSenderMargin = ( messages, m, i, userId ) =>\r\n{\r\n    // console.log(i === messages.length - 1);\r\n\r\n    if (\r\n        i < messages.length - 1 &&\r\n        messages[ i + 1 ].sender._id === m.sender._id &&\r\n        messages[ i ].sender._id !== userId\r\n    )\r\n        return 33;\r\n    else if (\r\n        ( i < messages.length - 1 &&\r\n            messages[ i + 1 ].sender._id !== m.sender._id &&\r\n            messages[ i ].sender._id !== userId ) ||\r\n        ( i === messages.length - 1 && messages[ i ].sender._id !== userId )\r\n    )\r\n        return 0;\r\n    else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = ( messages, m, i, userId ) =>\r\n{\r\n    return (\r\n        i < messages.length - 1 &&\r\n        ( messages[ i + 1 ].sender._id !== m.sender._id ||\r\n            messages[ i + 1 ].sender._id === undefined ) &&\r\n        messages[ i ].sender._id !== userId\r\n    );\r\n};\r\n\r\nexport const isLastMessage = ( messages, i, userId ) =>\r\n{\r\n    return (\r\n        i === messages.length - 1 &&\r\n        messages[ messages.length - 1 ].sender._id !== userId &&\r\n        messages[ messages.length - 1 ].sender._id\r\n    );\r\n};\r\n\r\nexport const isSameUser = ( messages, m, i ) =>\r\n{\r\n    return i > 0 && messages[ i - 1 ].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = ( loggedUser, users ) =>\r\n{\r\n    // it only sends the username \r\n    return users[ 0 ]._id === loggedUser._id ? users[ 1 ].name : users[ 0 ].name;\r\n};\r\n\r\nexport const getSenderFull = ( loggedUser, users ) =>\r\n{\r\n    // for sending the complete user\r\n    return users[ 0 ]._id === loggedUser._id ? users[ 1 ] : users[ 0 ];\r\n};","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport\r\n    {\r\n        Modal,\r\n        ModalOverlay,\r\n        ModalContent,\r\n        ModalHeader,\r\n        ModalFooter,\r\n        ModalBody,\r\n        ModalCloseButton,\r\n        Button,\r\n        useDisclosure,\r\n        IconButton,\r\n        Text,\r\n        Image,\r\n    } from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ( { user, children } ) =>\r\n{\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n    return (\r\n        <>\r\n            { children ? (\r\n                <span onClick={ onOpen }>{ children }</span>\r\n            ) : (\r\n                <IconButton d={ { base: \"flex\" } } icon={ <ViewIcon /> } onClick={ onOpen } />\r\n            ) }\r\n            <Modal size=\"lg\" onClose={ onClose } isOpen={ isOpen } isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent h=\"410px\">\r\n                    <ModalHeader\r\n                        fontSize=\"40px\"\r\n                        fontFamily=\"Work sans\"\r\n                        d=\"flex\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        { user.name }\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody\r\n                        d=\"flex\"\r\n                        flexDir=\"column\"\r\n                        alignItems=\"center\"\r\n                        justifyContent=\"space-between\"\r\n                    >\r\n                        <Image\r\n                            borderRadius=\"full\"\r\n                            boxSize=\"150px\"\r\n                            src={ user.pic }\r\n                            alt={ user.name }\r\n                        />\r\n                        <Text\r\n                            fontSize={ { base: \"28px\", md: \"30px\" } }\r\n                            fontFamily=\"Work sans\"\r\n                        >\r\n                            Email: { user.email }\r\n                        </Text>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={ onClose }>Close</Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ProfileModal;","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ( { children } ) =>\r\n{\r\n    const [ selectedChat, setSelectedChat ] = useState();\r\n    const [ user, setUser ] = useState();\r\n    const [ notification, setNotification ] = useState( [] );\r\n    const [ chats, setChats ] = useState();\r\n\r\n    const history = useHistory();\r\n    \r\n    useEffect( () =>\r\n    {\r\n        const userInfo = JSON.parse( localStorage.getItem( \"userInfo\" ) );\r\n        setUser( userInfo );\r\n\r\n        if ( !userInfo ) history.push( \"/\" );\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [ history ] );\r\n\r\n    return (\r\n        <ChatContext.Provider\r\n            value={ {\r\n                selectedChat,\r\n                setSelectedChat,\r\n                user,\r\n                setUser,\r\n                notification,\r\n                setNotification,\r\n                chats,\r\n                setChats,\r\n            } }\r\n        >\r\n            { children }\r\n        </ChatContext.Provider>\r\n    );\r\n};\r\n\r\nexport const ChatState = () =>\r\n{\r\n    return useContext( ChatContext );\r\n};\r\n\r\nexport default ChatProvider;","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport\r\n{\r\n    isLastMessage,\r\n    isSameSender,\r\n    isSameSenderMargin,\r\n    isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ( { messages } ) =>\r\n{\r\n    const { user } = ChatState();\r\n\r\n    return (\r\n        <ScrollableFeed>\r\n            { messages &&\r\n                messages.map( ( m, i ) => (\r\n                    <div style={ { display: \"flex\" } } key={ m._id }>\r\n                        { ( isSameSender( messages, m, i, user._id ) ||\r\n                            isLastMessage( messages, i, user._id ) ) && (\r\n                                <Tooltip label={ m.sender.name } placement=\"bottom-start\" hasArrow>\r\n                                    <Avatar\r\n                                        mt=\"7px\"\r\n                                        mr={ 1 }\r\n                                        size=\"sm\"\r\n                                        cursor=\"pointer\"\r\n                                        name={ m.sender.name }\r\n                                        src={ m.sender.pic }\r\n                                    />\r\n                                </Tooltip>\r\n                            ) }\r\n                        <span\r\n                            style={ {\r\n                                backgroundColor: `${ m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                                    }`,\r\n                                marginLeft: isSameSenderMargin( messages, m, i, user._id ),\r\n                                marginTop: isSameUser( messages, m, i, user._id ) ? 3 : 10,\r\n                                borderRadius: \"20px\",\r\n                                padding: \"5px 15px\",\r\n                                maxWidth: \"75%\",\r\n                            } }\r\n                        >\r\n                            { m.content }\r\n                        </span>\r\n                    </div>\r\n                ) ) }\r\n        </ScrollableFeed>\r\n    );\r\n};\r\n\r\nexport default ScrollableChat;","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ( { user, handleFunction, admin } ) =>\r\n{\r\n    return (\r\n        <Badge\r\n            px={ 2 }\r\n            py={ 1 }\r\n            borderRadius=\"lg\"\r\n            m={ 1 }\r\n            mb={ 2 }\r\n            variant=\"solid\"\r\n            fontSize={ 12 }\r\n            colorScheme=\"purple\"\r\n            cursor=\"pointer\"\r\n            onClick={ handleFunction }\r\n        >\r\n            { user.name }\r\n            { admin === user._id && <span> (Admin)</span> }\r\n            <CloseIcon pl={ 1 } />\r\n        </Badge>\r\n    );\r\n};\r\n\r\nexport default UserBadgeItem;","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ( { user,handleFunction } ) =>\r\n{\r\n    // const { user } = ChatState();\r\n\r\n    return (\r\n        <Box\r\n            onClick={ handleFunction }\r\n            cursor=\"pointer\"\r\n            bg=\"#E8E8E8\"\r\n            _hover={ {\r\n                background: \"#38B2AC\",\r\n                color: \"white\",\r\n            } }\r\n            w=\"100%\"\r\n            d=\"flex\"\r\n            alignItems=\"center\"\r\n            color=\"black\"\r\n            px={ 3 }\r\n            py={ 2 }\r\n            mb={ 2 }\r\n            borderRadius=\"lg\"\r\n        >\r\n            <Avatar\r\n                mr={ 2 }\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={ user.name }\r\n                src={ user.pic }\r\n            />\r\n            <Box>\r\n                <Text>{ user.name }</Text>\r\n                <Text fontSize=\"xs\">\r\n                    <b>Email : </b>\r\n                    { user.email }\r\n                </Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default UserListItem;","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport\r\n{\r\n    Modal,\r\n    ModalOverlay,\r\n    ModalContent,\r\n    ModalHeader,\r\n    ModalFooter,\r\n    ModalBody,\r\n    ModalCloseButton,\r\n    Button,\r\n    useDisclosure,\r\n    FormControl,\r\n    Input,\r\n    useToast,\r\n    Box,\r\n    IconButton,\r\n    Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ( { fetchMessages, fetchAgain, setFetchAgain } ) =>\r\n{\r\n    const { isOpen, onOpen, onClose } = useDisclosure(); // for modal \r\n    const [ groupChatName, setGroupChatName ] = useState();\r\n    const [ search, setSearch ] = useState( \"\" );\r\n    const [ searchResult, setSearchResult ] = useState( [] );\r\n    const [ loading, setLoading ] = useState( false );\r\n    const [ renameloading, setRenameLoading ] = useState( false );\r\n    const toast = useToast();\r\n\r\n    const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n    const handleSearch = async ( query ) =>\r\n    {\r\n        setSearch( query );\r\n        if ( !query )\r\n        {\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            setLoading( true );\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.get( `/api/user?search=${ search }`, config );\r\n            console.log( data );\r\n            setLoading( false );\r\n            setSearchResult( data );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom-left\",\r\n            } );\r\n            setLoading( false );\r\n        }\r\n    };\r\n\r\n    const handleRename = async () =>\r\n    {\r\n        if ( !groupChatName ) return;\r\n\r\n        try\r\n        {\r\n            setRenameLoading( true );\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.put(\r\n                `/api/chat/rename`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    chatName: groupChatName,\r\n                },\r\n                config\r\n            );\r\n\r\n            console.log( data._id );\r\n            // setSelectedChat(\"\");\r\n            setSelectedChat( data );\r\n            setFetchAgain( !fetchAgain );\r\n            setRenameLoading( false );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setRenameLoading( false );\r\n        }\r\n        setGroupChatName( \"\" );\r\n    };\r\n\r\n    const handleAddUser = async ( user1 ) =>\r\n    {\r\n        if ( selectedChat.users.find( ( u ) => u._id === user1._id ) )\r\n        {\r\n            toast( {\r\n                title: \"User Already in group!\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        if ( selectedChat.groupAdmin._id !== user._id )\r\n        {\r\n            toast( {\r\n                title: \"Only admins can add someone!\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            setLoading( true );\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.put(\r\n                `/api/chat/groupadd`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    userId: user1._id,\r\n                },\r\n                config\r\n            );\r\n\r\n            setSelectedChat( data );\r\n            setFetchAgain( !fetchAgain );\r\n            setLoading( false );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setLoading( false );\r\n        }\r\n        setGroupChatName( \"\" );\r\n    };\r\n\r\n    const handleRemove = async ( user1 ) =>\r\n    {\r\n        if ( selectedChat.groupAdmin._id !== user._id && user1._id !== user._id )\r\n        {\r\n            toast( {\r\n                title: \"Only admins can remove someone!\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            setLoading( true );\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.put(\r\n                `/api/chat/groupremove`,\r\n                {\r\n                    chatId: selectedChat._id,\r\n                    userId: user1._id,\r\n                },\r\n                config\r\n            );\r\n\r\n            user1._id === user._id ? setSelectedChat() : setSelectedChat( data );\r\n            setFetchAgain( !fetchAgain );\r\n            fetchMessages();\r\n            setLoading( false );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: error.response.data.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n            setLoading( false );\r\n        }\r\n        setGroupChatName( \"\" );\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IconButton d={ { base: \"flex\" } } icon={ <ViewIcon /> } onClick={ onOpen } />\r\n\r\n            <Modal onClose={ onClose } isOpen={ isOpen } isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        fontSize=\"35px\"\r\n                        fontFamily=\"Work sans\"\r\n                        d=\"flex\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        { selectedChat.chatName }\r\n                    </ModalHeader>\r\n\r\n                    <ModalCloseButton />\r\n                    <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n                        <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={ 3 }>\r\n                            { selectedChat.users.map( ( u ) => (\r\n                                <UserBadgeItem\r\n                                    key={ u._id }\r\n                                    user={ u }\r\n                                    admin={ selectedChat.groupAdmin }\r\n                                    handleFunction={ () => handleRemove( u ) }\r\n                                />\r\n                            ) ) }\r\n                        </Box>\r\n                        <FormControl d=\"flex\">\r\n                            <Input\r\n                                placeholder=\"Chat Name\"\r\n                                mb={ 3 }\r\n                                value={ groupChatName }\r\n                                onChange={ ( e ) => setGroupChatName( e.target.value ) }\r\n                            />\r\n                            <Button\r\n                                variant=\"solid\"\r\n                                colorScheme=\"teal\"\r\n                                ml={ 1 }\r\n                                isLoading={ renameloading }\r\n                                onClick={ handleRename }\r\n                            >\r\n                                Update\r\n                            </Button>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Add User to group\"\r\n                                mb={ 1 }\r\n                                onChange={ ( e ) => handleSearch( e.target.value ) }\r\n                            />\r\n                        </FormControl>\r\n\r\n                        { loading ? (\r\n                            <Spinner size=\"lg\" />\r\n                        ) : (\r\n                            searchResult?.map( ( user ) => (\r\n                                <UserListItem\r\n                                    key={ user._id }\r\n                                    user={ user }\r\n                                    handleFunction={ () => handleAddUser( user ) }\r\n                                />\r\n                            ) )\r\n                        ) }\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={ () => handleRemove( user ) } colorScheme=\"red\">\r\n                            Leave Group\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default UpdateGroupChatModal;","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ( { fetchAgain, setFetchAgain } ) =>\r\n{\r\n    const { selectedChat } = ChatState();\r\n\r\n    return (\r\n        <Box\r\n            d={ { base: selectedChat ? \"flex\" : \"none\", md: \"flex\" } }\r\n            alignItems=\"center\"\r\n            flexDir=\"column\"\r\n            p={ 3 }\r\n            bg=\"white\"\r\n            w={ { base: \"100%\", md: \"68%\" } }\r\n            borderRadius=\"lg\"\r\n            borderWidth=\"1px\"\r\n        >\r\n            <SingleChat fetchAgain={ fetchAgain } setFetchAgain={ setFetchAgain } />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default Chatbox;","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () =>\r\n{\r\n    return (\r\n        <Stack>\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n            <Skeleton height=\"45px\" />\r\n        </Stack>\r\n    );\r\n};\r\n\r\nexport default ChatLoading;","import\r\n    {\r\n        Modal,\r\n        ModalOverlay,\r\n        ModalContent,\r\n        ModalHeader,\r\n        ModalFooter,\r\n        ModalBody,\r\n        ModalCloseButton,\r\n        Button,\r\n        useDisclosure,\r\n        FormControl,\r\n        Input,\r\n        useToast,\r\n        Box,\r\n    } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ( { children } ) =>\r\n{\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const [ groupChatName, setGroupChatName ] = useState();\r\n    const [ selectedUsers, setSelectedUsers ] = useState( [] );\r\n    const [ search, setSearch ] = useState( \"\" );\r\n    const [ searchResult, setSearchResult ] = useState( [] );\r\n    const [ loading, setLoading ] = useState( false );\r\n    const toast = useToast();\r\n\r\n    const { user, chats, setChats } = ChatState();\r\n\r\n    const handleGroup = ( userToAdd ) =>\r\n    {\r\n        if ( selectedUsers.includes( userToAdd ) )\r\n        {\r\n            toast( {\r\n                title: \"User already added\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"top\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        setSelectedUsers( [ ...selectedUsers, userToAdd ] );\r\n    };\r\n\r\n    const handleSearch = async ( query ) =>\r\n    {\r\n        setSearch( query );\r\n        if ( !query )\r\n        {\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            setLoading( true );\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.get( `/api/user?search=${ search }`, config );\r\n            console.log( data );\r\n            setLoading( false );\r\n            setSearchResult( data );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom-left\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    const handleDelete = ( delUser ) =>\r\n    {\r\n        setSelectedUsers( selectedUsers.filter( ( sel ) => sel._id !== delUser._id ) );\r\n    };\r\n\r\n    const handleSubmit = async () =>\r\n    {\r\n        if ( !groupChatName || !selectedUsers )\r\n        {\r\n            toast( {\r\n                title: \"Please fill all the feilds\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"top\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.post(\r\n                `/api/chat/group`,\r\n                {\r\n                    name: groupChatName,\r\n                    users: JSON.stringify( selectedUsers.map( ( u ) => u._id ) ),\r\n                },\r\n                config\r\n            );\r\n            setChats( [ data, ...chats ] );\r\n            onClose();\r\n            toast( {\r\n                title: \"New Group Chat Created!\",\r\n                status: \"success\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Failed to Create the Chat!\",\r\n                description: error.response.data,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <span onClick={ onOpen }>{ children }</span>\r\n\r\n            <Modal onClose={ onClose } isOpen={ isOpen } isCentered>\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader\r\n                        fontSize=\"35px\"\r\n                        fontFamily=\"Work sans\"\r\n                        d=\"flex\"\r\n                        justifyContent=\"center\"\r\n                    >\r\n                        Create Group Chat\r\n                    </ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Group Name\"\r\n                                mb={ 3 }\r\n                                onChange={ ( e ) => setGroupChatName( e.target.value ) }\r\n                            />\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <Input\r\n                                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                                mb={ 1 }\r\n                                onChange={ ( e ) => handleSearch( e.target.value ) }\r\n                            />\r\n                        </FormControl>\r\n                        <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n                            { selectedUsers.map( ( u ) => (\r\n                                <UserBadgeItem\r\n                                    key={ u._id }\r\n                                    user={ u }\r\n                                    handleFunction={ () => handleDelete( u ) }\r\n                                />\r\n                            ) ) }\r\n                        </Box>\r\n                        { loading ? (\r\n                            // <ChatLoading />\r\n                            <div>Loading...</div>\r\n                        ) : (\r\n                            searchResult\r\n                                ?.slice( 0, 4 )\r\n                                .map( ( user ) => (\r\n                                    <UserListItem\r\n                                        key={ user._id }\r\n                                        user={ user }\r\n                                        handleFunction={ () => handleGroup( user ) }\r\n                                    />\r\n                                ) )\r\n                        ) }\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button onClick={ handleSubmit } colorScheme=\"blue\">\r\n                            Create Chat\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GroupChatModal;","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ( { fetchAgain } ) =>\r\n{\r\n    const [ loggedUser, setLoggedUser ] = useState();\r\n\r\n    const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n    const toast = useToast();\r\n\r\n    const fetchChats = async () =>\r\n    {\r\n        // console.log(user._id);\r\n        try\r\n        {\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.get( \"/api/chat\", config );\r\n            setChats( data );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the chats\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom-left\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    useEffect( () =>\r\n    {\r\n        setLoggedUser( JSON.parse( localStorage.getItem( \"userInfo\" ) ) );\r\n        fetchChats();\r\n        // eslint-disable-next-line\r\n    }, [ fetchAgain ] );\r\n\r\n    return (\r\n        <Box\r\n            d={ { base: selectedChat ? \"none\" : \"flex\", md: \"flex\" } }\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            p={ 3 }\r\n            bg=\"white\"\r\n            w={ { base: \"100%\", md: \"31%\" } }\r\n            borderRadius=\"lg\"\r\n            borderWidth=\"1px\"\r\n        >\r\n            <Box\r\n                pb={ 3 }\r\n                px={ 3 }\r\n                fontSize={ { base: \"28px\", md: \"30px\" } }\r\n                fontFamily=\"Work sans\"\r\n                d=\"flex\"\r\n                w=\"100%\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n            >\r\n                My Chats\r\n                <GroupChatModal>\r\n                    <Button\r\n                        d=\"flex\"\r\n                        fontSize={ { base: \"17px\", md: \"10px\", lg: \"17px\" } }\r\n                        rightIcon={ <AddIcon /> }\r\n                    >\r\n                        New Group Chat\r\n                    </Button>\r\n                </GroupChatModal>\r\n            </Box>\r\n            <Box\r\n                d=\"flex\"\r\n                flexDir=\"column\"\r\n                p={ 3 }\r\n                bg=\"#F8F8F8\"\r\n                w=\"100%\"\r\n                h=\"100%\"\r\n                borderRadius=\"lg\"\r\n                overflowY=\"hidden\"\r\n            >\r\n                { chats ? (\r\n                    <Stack overflowY=\"scroll\">\r\n                        { chats.map( ( chat ) => (\r\n                            <Box\r\n                                onClick={ () => setSelectedChat( chat ) }\r\n                                cursor=\"pointer\"\r\n                                bg={ selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\" }\r\n                                color={ selectedChat === chat ? \"white\" : \"black\" }\r\n                                px={ 3 }\r\n                                py={ 2 }\r\n                                borderRadius=\"lg\"\r\n                                key={ chat._id }\r\n                            >\r\n                                <Text>\r\n                                    { !chat.isGroupChat\r\n                                        ? getSender( loggedUser, chat.users )\r\n                                        : chat.chatName }\r\n                                </Text>\r\n                                { chat.latestMessage && (\r\n                                    <Text fontSize=\"xs\">\r\n                                        <b>{ chat.latestMessage.sender.name } : </b>\r\n                                        { chat.latestMessage.content.length > 50\r\n                                            ? chat.latestMessage.content.substring( 0, 51 ) + \"...\"\r\n                                            : chat.latestMessage.content }\r\n                                    </Text>\r\n                                ) }\r\n                            </Box>\r\n                        ) ) }\r\n                    </Stack>\r\n                ) : (\r\n                    <ChatLoading />\r\n                ) }\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default MyChats;","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport\r\n    {\r\n        Menu,\r\n        MenuButton,\r\n        MenuDivider,\r\n        MenuItem,\r\n        MenuList,\r\n    } from \"@chakra-ui/menu\";\r\nimport\r\n    {\r\n        Drawer,\r\n        DrawerBody,\r\n        DrawerContent,\r\n        DrawerHeader,\r\n        DrawerOverlay,\r\n    } from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer ()\r\n{\r\n    const [ search, setSearch ] = useState( \"\" );\r\n    const [ searchResult, setSearchResult ] = useState( [] );\r\n    const [ loading, setLoading ] = useState( false );\r\n    const [ loadingChat, setLoadingChat ] = useState( false );\r\n\r\n    const {\r\n        setSelectedChat,\r\n        user,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n    } = ChatState();\r\n\r\n    const toast = useToast();\r\n    const { isOpen, onOpen, onClose } = useDisclosure();\r\n    const history = useHistory();\r\n\r\n    const logoutHandler = () =>\r\n    {\r\n        localStorage.removeItem( \"userInfo\" );\r\n        history.push( \"/\" );\r\n    };\r\n\r\n    const handleSearch = async () =>\r\n    {\r\n        if ( !search )\r\n        {\r\n            toast( {\r\n                title: \"Please enter something to search\",\r\n                status: \"warning\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"top-left\",\r\n            } );\r\n            return;\r\n        }\r\n\r\n        try\r\n        {\r\n            setLoading( true );\r\n\r\n            const config = {\r\n                headers: {\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n\r\n            const { data } = await axios.get( `/api/user?search=${ search }`, config );\r\n\r\n            setLoading( false );\r\n            setSearchResult( data );\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error Occured!\",\r\n                description: \"Failed to Load the Search Results\",\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom-left\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    const accessChat = async ( userId ) =>\r\n    {\r\n        console.log( userId );\r\n\r\n        try\r\n        {\r\n            setLoadingChat( true );\r\n            const config = {\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                    Authorization: `Bearer ${ user.token }`,\r\n                },\r\n            };\r\n            const { data } = await axios.post( `/api/chat`, { userId }, config );\r\n\r\n            if ( !chats.find( ( c ) => c._id === data._id ) ) setChats( [ data, ...chats ] );\r\n            setSelectedChat( data );\r\n            setLoadingChat( false );\r\n            onClose();\r\n        } catch ( error )\r\n        {\r\n            toast( {\r\n                title: \"Error fetching the chat\",\r\n                description: error.message,\r\n                status: \"error\",\r\n                duration: 5000,\r\n                isClosable: true,\r\n                position: \"bottom-left\",\r\n            } );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                d=\"flex\"\r\n                justifyContent=\"space-between\"\r\n                alignItems=\"center\"\r\n                bg=\"white\"\r\n                w=\"100%\"\r\n                p=\"5px 10px 5px 10px\"\r\n                borderWidth=\"5px\"\r\n            >\r\n                <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n                    <Button variant=\"ghost\" onClick={ onOpen }>\r\n                        <i className=\"fas fa-search\"></i>\r\n                        <Text d={ { base: \"none\", md: \"flex\" } } px={ 4 }>\r\n                            Search User\r\n                        </Text>\r\n                    </Button>\r\n                </Tooltip>\r\n                <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n                    Talk-A-Tive\r\n                </Text>\r\n                <div>\r\n                    <Menu>\r\n                        <MenuButton p={ 1 }>\r\n                            <NotificationBadge\r\n                                count={ notification.length }\r\n                                effect={ Effect.SCALE }\r\n                            />\r\n                            <BellIcon fontSize=\"2xl\" m={ 1 } />\r\n                        </MenuButton>\r\n                        <MenuList pl={ 3 }>\r\n                            { !notification.length && \"No New Messages\" }\r\n                            { notification.map( ( notif ) => (\r\n                                <MenuItem\r\n                                    key={ notif._id }\r\n                                    onClick={ () =>\r\n                                    {\r\n                                        setSelectedChat( notif.chat );\r\n                                        setNotification( notification.filter( ( n ) => n !== notif ) );\r\n                                    } }\r\n                                >\r\n                                    { notif.chat.isGroupChat\r\n                                        ? `New Message in ${ notif.chat.chatName }`\r\n                                        : `New Message from ${ getSender( user, notif.chat.users ) }` }\r\n                                </MenuItem>\r\n                            ) ) }\r\n                        </MenuList>\r\n                    </Menu>\r\n                    <Menu>\r\n                        <MenuButton as={ Button } bg=\"white\" rightIcon={ <ChevronDownIcon /> }>\r\n                            <Avatar\r\n                                size=\"sm\"\r\n                                cursor=\"pointer\"\r\n                                name={ user.name }\r\n                                src={ user.pic }\r\n                            />\r\n                        </MenuButton>\r\n                        <MenuList>\r\n                            <ProfileModal user={ user }>\r\n                                <MenuItem>My Profile</MenuItem>{ \" \" }\r\n                            </ProfileModal>\r\n                            <MenuDivider />\r\n                            <MenuItem onClick={ logoutHandler }>Logout</MenuItem>\r\n                        </MenuList>\r\n                    </Menu>\r\n                </div>\r\n            </Box>\r\n\r\n            <Drawer placement=\"left\" onClose={ onClose } isOpen={ isOpen }>\r\n                <DrawerOverlay />\r\n                <DrawerContent>\r\n                    <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n                    <DrawerBody>\r\n                        <Box d=\"flex\" pb={ 2 }>\r\n                            <Input\r\n                                placeholder=\"Search by name or email\"\r\n                                mr={ 2 }\r\n                                value={ search }\r\n                                onChange={ ( e ) => setSearch( e.target.value ) }\r\n                            />\r\n                            <Button onClick={ handleSearch }>Go</Button>\r\n                        </Box>\r\n                        { loading ? (\r\n                            <ChatLoading />\r\n                        ) : (\r\n                            searchResult?.map( ( user ) => (\r\n                                <UserListItem\r\n                                    key={ user._id }\r\n                                    user={ user }\r\n                                    handleFunction={ () => accessChat( user._id ) }\r\n                                />\r\n                            ) )\r\n                        ) }\r\n                        { loadingChat && <Spinner ml=\"auto\" d=\"flex\" /> }\r\n                    </DrawerBody>\r\n                </DrawerContent>\r\n            </Drawer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SideDrawer;","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () =>\r\n{\r\n    const [ fetchAgain, setFetchAgain ] = useState( false );\r\n    const { user } = ChatState();\r\n\r\n    return (\r\n        <div style={ { width: \"100%\" } }>\r\n            { user && <SideDrawer /> }\r\n            <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n                { user && <MyChats fetchAgain={ fetchAgain } /> }\r\n                { user && (\r\n                    <Chatbox fetchAgain={ fetchAgain } setFetchAgain={ setFetchAgain } />\r\n                ) }\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chatpage;","import './App.css';\nimport { Route } from 'react-router-dom'\nimport HomePage from './Pages/HomePage';\nimport ChatPage from './Pages/ChatPage';\nimport ChatProvider from './Context/ChatProvider';\n\nfunction App ()\n{\n  return (\n    <div className=\"App\">\n      <ChatProvider>\n        <Route path='/' component={ HomePage } exact />\n        <Route path='/chats' component={ ChatPage } />\n      </ChatProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { BrowserRouter } from 'react-router-dom'\nimport ChatProvider from './Context/ChatProvider';\nReactDOM.render(\n  <BrowserRouter>\n    <ChatProvider>\n      <ChakraProvider>\n        <App />\n      </ChakraProvider>\n    </ChatProvider>\n  </BrowserRouter>,\n  document.getElementById( 'root' )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}